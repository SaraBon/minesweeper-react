{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","disableClick","onClick","gameOver","clicked","flagged","react_default","a","createElement","className","style","fontSize","onContextMenu","index_es","icon","type","backgroundColor","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameData","Array","fill","won","minesFlagged","numberOfMines","squaresData","i","push","Math","floor","random","j","counter","setState","componentWillMount","clickedTemp","slice","event","y","preventDefault","flaggedTemp","_this2","map","x","handleClickMS","_this3","href","renderSquare","App_Modal","reset","result","React","Component","Modal","Minesweeper","App_Board","Boolean","window","location","hostname","match","library","add","faBomb","faFlagCheckered","faFrown","faSmile","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f5e9afb.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\n// SQUARE-----------------------------------------------------------------------\n\n\nfunction Square(props) {\n\n  const iconStyleMine = {\n    fontSize: \"30px\",\n    backgroundColor: \"#e2b5b1\",\n  }\n\n  const iconStyleFlag = {\n    fontSize: \"30px\",\n  }\n\n// disable buttons when GameOver ---\nlet disableClick = props.onClick;\nif (props.gameOver === true) {disableClick = function(){return}};\n\n// return the Squares ---\n\nif (!props.clicked && !props.flagged ) {\n  return <button\n            className=\"square\"\n            onClick={disableClick}\n            onContextMenu={props.onContextMenu}\n          />\n}\n\nelse if (props.flagged) {\n  return <button\n            className=\"square\"\n            style={iconStyleFlag}\n            onClick={disableClick}\n            onContextMenu={props.onContextMenu}\n          >\n            <FontAwesomeIcon icon=\"flag-checkered\"/>\n          </button>\n}\n\nelse  if (props.type === \"mine\") {\n  return <button\n            className=\"square clicked\"\n            style={iconStyleMine}\n            onClick={disableClick}\n            onContextMenu={props.onContextMenu}\n          >\n            <FontAwesomeIcon icon=\"bomb\"/>\n          </button>\n}\n\nelse {\n  return <button\n            className=\"square clicked\"\n            onClick={disableClick}\n            onContextMenu={props.onContextMenu}\n          >\n            {props.type}\n          </button>\n}\n\n}\n\n// BOARD COMPONENT--------------------------------------------------------------\n\nclass Board extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameData : [],\n      clicked : Array(64).fill(false),\n      gameOver : false,\n      flagged : Array(64).fill(false),\n      won: false,\n      minesFlagged: 0,\n      numberOfMines: 8,\n    }\n  }\n\ncomponentWillMount(){\n  // Empty the board ---\n  let squaresData = [];\n  for (let i = 0; i < 64; i++) {\n    squaresData.push(0);\n  };\n\n// Put random Mines ---\n  for (let i = 0; i<= this.state.numberOfMines; i++) {\n    let randomMine = Math.floor((Math.random() * 63) + 1);\n    squaresData[randomMine] = \"mine\";\n  };\n\n// calculating the number neighbors ----\n\nfor (let j = 0; j<64; j++) {\n  let counter = 0;\n\n  if (squaresData[j] !== \"mine\" && (j+1) % 8 !== 0 && squaresData[j+1] === \"mine\")  {\n    counter += 1;\n    squaresData[j] = counter;\n  }\n\n  if (j !== 0 && j % 8 !== 0 && squaresData[j] !== \"mine\" && squaresData[j-1] === \"mine\")  {\n    counter += 1;\n    squaresData[j] = counter;\n  }\n\n  if (j >= 7 && (j+1) % 8 !== 0 && squaresData[j] !== \"mine\" && squaresData[j-7] === \"mine\")  {\n    counter += 1;\n    squaresData[j] = counter;\n  }\n\n  if (j >= 8 && squaresData[j] !== \"mine\" && squaresData[j-8] === \"mine\")  {\n    counter += 1;\n    squaresData[j] = counter;\n  }\n\n  if (j >= 9 && j % 8 !== 0 && squaresData[j] !== \"mine\" && squaresData[j-9] === \"mine\")  {\n    counter += 1;\n    squaresData[j] = counter;\n  }\n  if (j <= 54 && (j+1) % 8 !== 0 && squaresData[j] !== \"mine\" && squaresData[j+9] === \"mine\")  {\n    counter += 1;\n    squaresData[j] = counter;\n  }\n  if (j <= 55 && squaresData[j] !== \"mine\" && squaresData[j+8] === \"mine\")  {\n    counter += 1;\n    squaresData[j] = counter;\n  }\n  if ( j <= 56 && (j % 8 !== 0) &&  squaresData[j] !== \"mine\" && squaresData[j+7] === \"mine\")  {\n      counter += 1;\n      squaresData[j] = counter;\n    }\n}\n\n// set the game data in component's state ---\nthis.setState({gameData : squaresData});\n}\n\n// the reset funtion ---\nreset(){\nthis.setState({\n  gameData : [],\n  clicked : Array(64).fill(false),\n  gameOver : false,\n  flagged : Array(64).fill(false),\n  won: false,\n  minesFlagged: 0,\n});\nthis.componentWillMount();\n}\n\n// Click on Square ---\nhandleClickMS(i) {\n  // return if square already clicked\n  if (this.state.clicked[i]) {return};\n  // otherwise mark square as clicked\n  let clickedTemp = this.state.clicked.slice();\n  clickedTemp[i] = true;\n  this.setState({clicked: clickedTemp});\n\n  // check if gameover and if so, set the state\n  if (this.state.gameData[i] === \"mine\" && this.state.flagged[i] === false) {\n    this.setState({gameOver: true})\n  };\n  // check if won and if so, set the state\n  if(this.state.minesFlagged === 3) {\n    this.setState({won: true})\n  };\n}\n\n// handle rightclick to flag the squares\nonContextMenu(event, y){\n  event.preventDefault();\n  let flaggedTemp = this.state.flagged.slice();\n  if (flaggedTemp[y] === false) {\n    flaggedTemp[y] = true\n  } else {\n    flaggedTemp[y] = false\n  }\n  this.setState({flagged: flaggedTemp});\n  // check if won\n  if (this.state.gameData[y] === \"mine\") {\n    this.setState({minesFlagged: this.state.minesFlagged+1})\n  };\n  if(this.state.minesFlagged === this.state.numberOfMines) {\n    this.setState({won: true})\n  };\n}\n\n// return the single squares\nrenderSquare(){\nlet squaresDivs = this.state.gameData.map((x,y) => {\n  return (\n        //  <div\n          //  key={Math.random() + 1}\n        //    className=\"squareContainer\"\n      //    >\n            <Square\n              type={x}\n              clicked={this.state.clicked[y]}\n              gameOver={this.state.gameOver}\n              flagged={this.state.flagged[y]}\n              onClick={() => this.handleClickMS(y)}\n              onContextMenu={(event) => this.onContextMenu(event, y)}\n            />\n        //  </div>\n        );\n      }\n)\n  return squaresDivs;\n}\n\n\n // render the main board component ------\n\n  render() {\n    return (!this.state.gameOver && !this.state.won) ?\n      ( <div>\n          <h1>Find Minesweeper instructions <a href=\"http://www.freeminesweeper.org/help/minehelpinstructions.html\">here</a></h1>\n          <div className=\"board\"> {this.renderSquare()} </div>\n          <button onClick={() => this.reset()} >Reset</button>\n        </div>)\n      :\n      ( <div>\n        <h1>Find Minesweeper instructions <a href=\"http://www.freeminesweeper.org/help/minehelpinstructions.html\">here</a></h1>\n          <div className=\"board\"> {this.renderSquare()} </div>\n          <Modal onClick={() => this.reset()} result={this.state.won}/>\n          <button onClick={() => this.reset()}>Reset</button>\n        </div>)\n  }\n}\n\n// RESULT MODAL -------------------------------------------------------------\nclass Modal extends React.Component {\n\n  render() {\n\n    return  this.props.result === false ?\n        (\n        <div className=\"greyOverlay\">\n              <div className=\"modal\" >\n                <FontAwesomeIcon icon=\"frown\"  />\n                  <button onClick={this.props.onClick}>\n                    Try Again\n                  </button>\n              </div>\n            </div>\n          )\n          :\n          (\n            <div className=\"greyOverlay\">\n                    <div className=\"modal\" >\n                      <FontAwesomeIcon icon=\"smile\"  />\n                        <button onClick={this.props.onClick}>\n                          once more\n                        </button>\n                    </div>\n                  </div>\n          );\n        }\n}\n\n// GAME COMPONENT---------------------------------------------------------------\n\nclass Minesweeper extends React.Component {\n  render() {\n   return <Board/>\n  }\n}\n\n\n\nexport default Minesweeper\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Minesweeper from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faBomb, faFlagCheckered, faFrown, faSmile } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faBomb, faFlagCheckered, faFrown, faSmile)\n\n\nReactDOM.render(<Minesweeper />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}